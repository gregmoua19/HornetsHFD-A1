package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    @Override
    public void runApp() {

        new Game();
    }

}

class Game extends Form implements Runnable{
    private GameWorld gw;

    final static int DISP_W = Display.getInstance().getDisplayWidth();
    final static int DISP_H = Display.getInstance().getDisplayHeight();

    public static int getSmallDim() {
        return Math.min(DISP_W, DISP_H);
    }
    public static int getLargeDim(){
        return Math.max(DISP_W, DISP_H);
    }

    public Game(){
        gw = new GameWorld();

        addKeyListener('Q', (evt) -> gw.quit());
        addKeyListener( -91, (evt) -> gw.upArrowPressed());
        addKeyListener(-92, (evt) -> gw.downArrowPressed());
        addKeyListener(-93, (evt) -> gw.leftArrowPressed());
        addKeyListener(-94, (evt) -> gw.rightArrowPressed());
        addKeyListener('f', (evt) -> gw.fightFire());
        addKeyListener('d', (evt) -> gw.drinkWater());

        UITimer timer = new UITimer(this);
        timer.schedule(200, true, this);

        this.getAllStyles().setBgColor(ColorUtil.BLACK);
        this.show();
    }

    public void paint(Graphics g) {
        super.paint(g);
        gw.draw(g);
    }

    @Override
    public void run() {
        gw.tick();
        repaint();
    }
}

class GameWorld {
    private final int NUMBER_OF_FIRES = 3;
    private Helicopter helicopter;
    private ArrayList<Fire> fires;
    private Helipad helipad;
    private River river;

    public GameWorld(){
        init();
    }

    void init() {
        helicopter = new Helicopter();
        helipad = new Helipad();
        river = new River();
     //   for(int i = 0; i < NUMBER_OF_FIRES;i++) {
   //         fires.add(new Fire());
 //       }
    }

    public void quit() {

        Display.getInstance().exitApplication();
    }


    public void leftArrowPressed() {

    }

    public void rightArrowPressed(){

    }

    public void upArrowPressed(){

    }

    public void downArrowPressed(){

    }

    public void drinkWater(){
        if (helicopter.collidesWithRiver(river) == true) {
            helicopter.setWater(helicopter.getWater()+100);
        }
    }

    public void fightFire(){

    }

    public void draw(Graphics g) {

        helicopter.draw(g);
        river.draw(g);
        helipad.draw(g);
    }

    public void tick() {
    }
}

class River {

    private Point location;

    public River(){
        init();
    }

    private void init() {
        location = new Point(0, Display.getInstance().getDisplayHeight() / 3);
    }
    public void draw(Graphics g) {

        g.setColor(ColorUtil.BLUE);
        g.drawRect(location.getX(), location.getY(),
                Display.getInstance().getDisplayWidth(),
                Display.getInstance().getDisplayHeight() / 10);
    }

    public Point getLocation(){
        return location;
    }
}

class Helipad {

    private Point location;

    public Helipad(){
        init();
    }

    private void init(){

        //set the location of the helipad equal
        //to middle of screen at the bottom (9/10 of the way down)
        location = new Point(Display.getInstance().getDisplayWidth() / 2,Display.getInstance().getDisplayHeight() -
                Display.getInstance().getDisplayHeight() / 10);
        }
    public void draw(Graphics g) {

        g.setColor(ColorUtil.GRAY);

        //created variables to not repeat
        //"Display.getInstance().get------" several times
        int length = Display.getInstance().getDisplayHeight()/10;
        int width = Display.getInstance().getDisplayWidth()/10;
        int offset = Display.getInstance().getDisplayWidth()/20;
        //Because shapes are drawn from the upperleftmost point
        //I offset it by half of its width to make it look more center
        g.drawRect(location.getX() - offset,location.getY(), width, length);

        g.drawArc(location.getX()- offset,location.getY(),
                    width, length, 0, 360);
    }
}

class Fire {
    private Point location;
    private int size;

    public Fire(){

        size = new Random().nextInt(100);
    }

    public void draw(Graphics g) {

        g.setColor(ColorUtil.MAGENTA);
    }

}

class Helicopter {
    private Point location;
    private int fuel;
    private int water;
    private int speed;
    private static int maxSpeed;
    private static int maxWater;

    public Helicopter(){
        init();
    }

    private void init(){
        fuel = 25000;
        maxSpeed = 10;
        maxWater = 1000;
        speed = 0;
        water = 0;
    }

    public Point getLocation() {
        return location;
    }

    public int getWater(){
        return water;
    }

    public void setWater(int water){
        this.water += water;
    }

    public void draw(Graphics g) {
        g.setColor(ColorUtil.YELLOW);
        g.fillArc(Display.getInstance().getDisplayWidth()/2,
                Display.getInstance().getDisplayHeight()/2,
                50,50,0,360);
    }

    public boolean collidesWithRiver(River river) {
        return river.getLocation().getY() >= this.getLocation().getY() ;
    }


}
